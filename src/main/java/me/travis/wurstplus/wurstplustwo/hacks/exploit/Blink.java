//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import java.util.Objects;

import me.travis.wurstplus.wurstplustwo.event.events.WurstplusEventPacket;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.entity.Entity;
import net.minecraft.world.World;
import java.util.function.Predicate;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.network.Packet;
import java.util.LinkedList;
import net.minecraft.entity.passive.EntityDonkey;
import net.minecraft.client.entity.EntityOtherPlayerMP;


public class Blink extends WurstplusHack
{
    WurstplusSetting visualize;
    WurstplusSetting entityblink;
    private EntityOtherPlayerMP Original;
    private EntityDonkey RidingEntity;
    private final LinkedList<Packet> Packets;
    @EventHandler
    private final Listener<WurstplusEventPacket> packet_event;
    
    public Blink() {
        super(WurstplusCategory.WURSTPLUS_MOVEMENT);
        this.visualize = this.create("Visualize", "BlinkVisualize", true);
        this.entityblink = this.create("Entity Blink", "EntityBlink", true);
        this.Packets = new LinkedList<Packet>();
        this.packet_event = new Listener<WurstplusEventPacket>(event -> {
            if (event.get_packet() instanceof CPacketPlayer || event.get_packet() instanceof CPacketConfirmTeleport || (this.entityblink.get_value(true) && event.get_packet() instanceof CPacketVehicleMove)) {
                event.cancel();
                this.Packets.add(event.get_packet());
            }
            return;
        }, (Predicate<WurstplusEventPacket>[])new Predicate[0]);
        this.name = "Blink";
        this.tag = "Blink";
        this.description = "ez.";
    }
    
    public void enable() {
        super.enable();
        this.Packets.clear();
        this.Original = null;
        this.RidingEntity = null;
        if (this.visualize.get_value(true)) {
            (this.Original = new EntityOtherPlayerMP((World)mc.world, mc.session.getProfile())).copyLocationAndAnglesFrom((Entity)mc.player);
            this.Original.rotationYaw = mc.player.rotationYaw;
            this.Original.rotationYawHead = mc.player.rotationYawHead;
            this.Original.inventory.copyInventory(mc.player.inventory);
            mc.world.addEntityToWorld(-1048575, (Entity)this.Original);
            if (mc.player.isRiding() && mc.player.getRidingEntity() instanceof EntityDonkey) {
                final EntityDonkey l_Original = (EntityDonkey)mc.player.getRidingEntity();
                (this.RidingEntity = new EntityDonkey((World)mc.world)).copyLocationAndAnglesFrom((Entity)l_Original);
                this.RidingEntity.setChested(l_Original.hasChest());
                mc.world.addEntityToWorld(-1048574, (Entity)this.RidingEntity);
                this.Original.startRiding((Entity)this.RidingEntity, true);
            }
        }
    }
    
    public void disable() {
        super.disable();
        if (!this.Packets.isEmpty() && mc.world != null) {
            while (!this.Packets.isEmpty()) {
                Objects.requireNonNull(mc.getConnection()).sendPacket((Packet)this.Packets.getFirst());
                this.Packets.removeFirst();
            }
        }
        if (this.Original != null) {
            if (this.Original.isRiding()) {
                this.Original.dismountRidingEntity();
            }
            mc.world.removeEntity((Entity)this.Original);
        }
        if (this.RidingEntity != null) {
            assert mc.world != null;
            mc.world.removeEntity((Entity)this.RidingEntity);
        }
    }
}
