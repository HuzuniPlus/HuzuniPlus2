package me.travis.wurstplus.wurstplustwo.hacks.exploit;

//Imports

import me.travis.wurstplus.wurstplustwo.event.events.EventClientTick;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import me.travis.wurstplus.wurstplustwo.util.TickedTimer;
import me.travis.wurstplus.wurstplustwo.util.WurstplusMessageUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItemFrame;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;

import java.util.Comparator;
import java.util.function.Predicate;


//Module

public class AutoFrameDupe extends WurstplusHack {

    private TickedTimer msTimer;
    private boolean Sending = false;
    private Entity entity;

    //Module Info
    public AutoFrameDupe() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);

        this.name        = "Auto Frame Dupe"; //Commands and Clickgui
        this.tag         = "AutoFrameDupe"; //Config and Arraylist
        this.description = "colisseum"; //Useless but normally i add this
        this.msTimer = new TickedTimer();
        this.msTimer.stop();
    }

    //Module Settings
     WurstplusSetting ticks = create("Ticks", "Ticks", 10.0, 1.0, 20.0);
    @EventHandler
    private Listener<EventClientTick> OnTick = new Listener<EventClientTick>(p_Event -> {
        if (!this.msTimer.passed(this.ticks.get_value(1))) {
            return;
        }
        this.entity = this.mc.world.loadedEntityList.stream().filter(loadedEntity -> this.isValidTileEntity((Entity)loadedEntity)).min(Comparator.comparing(loadedEntity -> this.mc.player.getDistance((double)loadedEntity.getPosition().getX(), (double)loadedEntity.getPosition().getY(), (double)loadedEntity.getPosition().getZ()))).orElse(null);
        EntityItemFrame itemFrame = (EntityItemFrame)this.entity;
        if (this.entity == null) {
            WurstplusMessageUtil.send_client_message("No entity found");
            this.toggle();
            return;
        }
        if (this.mc.player.getHeldItemMainhand() == null || this.mc.player.getHeldItemMainhand().getItem() == Items.AIR) {
            return;
        }
        if (this.Sending && (itemFrame.getDisplayedItem() == null || itemFrame.getDisplayedItem().getItem() == Items.AIR)) {
            this.Sending = false;
        }
        this.mc.player.connection.sendPacket((Packet)(this.Sending ? new CPacketUseEntity(this.entity) : new CPacketUseEntity(this.entity, EnumHand.MAIN_HAND)));
        this.Sending = !this.Sending;
        this.msTimer.reset();
    }, new Predicate[0]);


    @Override
    public void enable() {
        this.Sending = false;
        this.msTimer.start();
    }

    @Override
    public void disable() {
        this.msTimer.stop();
    }



    private boolean isValidTileEntity(Entity entity) {
        return entity instanceof EntityItemFrame && this.mc.player.getDistance(entity) < 4.0f;
    }
}



